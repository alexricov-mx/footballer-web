<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Footballer Web App</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <!-- Inicio (siempre visible) -->
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Inicio
            </NavLink>
        </div>
        
        @if (isAuthenticated)
        {
            <!-- Panel Inicio (solo para administradores) -->
            @if (userRole == "super_admin" || userRole == "admin")
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="members/home">
                        <span class="oi oi-target" aria-hidden="true"></span> Panel Inicio
                    </NavLink>
                </div>
                
                <!-- Dashboard -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="members/dashboard">
                        <span class="oi oi-dashboard" aria-hidden="true"></span> Dashboard
                    </NavLink>
                </div>
            }
            
            <!-- Mis Torneos -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="members/my-tournaments-playing">
                    <span class="oi oi-badge" aria-hidden="true"></span> Mis Torneos
                </NavLink>
            </div>
            
            <!-- Mis Invitaciones -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="members/my-invitations">
                    <span class="oi oi-envelope-closed" aria-hidden="true"></span> Mis Invitaciones
                </NavLink>
            </div>
            
            <!-- Gestión de Usuarios (solo para super_admin y admin) -->
            @if (userRole == "super_admin" || userRole == "admin")
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="members/usuarios">
                        <span class="oi oi-people" aria-hidden="true"></span> Usuarios
                    </NavLink>
                </div>
                
                <!-- Test Equipos (Debug) - solo para administradores -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="test-equipos">
                        <span class="oi oi-bug" aria-hidden="true"></span> Test Equipos (Debug)
                    </NavLink>
                </div>
            }
            
            <!-- Acerca de -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="about">
                    <span class="oi oi-info" aria-hidden="true"></span> Acerca de
                </NavLink>
            </div>
            
            <!-- Cerrar Sesión -->
            <div class="nav-item px-3">
                <LogoutButton CssClass="nav-link" ButtonText="Cerrar Sesión" ShowConfirmation="false" />
            </div>
        }
        else
        {
            <!-- Iniciar Sesión (solo para usuarios no autenticados) -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="auth/simple-login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Iniciar Sesión
                </NavLink>
            </div>
            
            <!-- Acerca de (para usuarios no autenticados) -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="about">
                    <span class="oi oi-info" aria-hidden="true"></span> Acerca de
                </NavLink>
            </div>
        }
    </nav>
</div>

@using FootballerWeb.Services
@* @inject IAuthStateService AuthStateService *@
@inject IJSRuntime JSRuntime
@inject IJwtClientService JwtClientService
@inject UsuarioService UsuarioService

@code {
    private bool collapseNavMenu = true;
    private bool isAuthenticated = false;
    private string? userRole = null;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthenticationStatus();
        }
    }

    private async Task CheckAuthenticationStatus()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "authToken");
            isAuthenticated = !string.IsNullOrEmpty(token) && JwtClientService.IsTokenValid(token);
            
            if (isAuthenticated && !string.IsNullOrEmpty(token))
            {
                // Primero intentar obtener el rol del JWT
                var claims = JwtClientService.GetClaimsFromToken(token);
                userRole = claims?.FindFirst("role")?.Value ?? 
                          claims?.FindFirst("rol")?.Value ?? 
                          claims?.FindFirst("Rol")?.Value;
                
                // Si no hay rol en el JWT, obtenerlo de la base de datos
                if (string.IsNullOrEmpty(userRole))
                {
                    var userEmail = JwtClientService.GetUserEmailFromToken(token);
                    if (!string.IsNullOrEmpty(userEmail))
                    {
                        try
                        {
                            var roleFromDb = await UsuarioService.GetUserRoleByEmailAsync(userEmail);
                            if (!string.IsNullOrEmpty(roleFromDb))
                            {
                                userRole = roleFromDb;
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"[ERROR NavMenu] Error obteniendo rol de BD: {ex.Message}");
                        }
                    }
                }
                
                // Debug: Log para ver qué rol se está detectando
                Console.WriteLine($"[DEBUG NavMenu] Rol detectado: '{userRole}'");
                Console.WriteLine($"[DEBUG NavMenu] Es admin?: {(userRole == "super_admin" || userRole == "admin")}");
            }
            else
            {
                userRole = null;
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR NavMenu] Error en CheckAuthenticationStatus: {ex.Message}");
            isAuthenticated = false;
            userRole = null;
            StateHasChanged();
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
