@using FootballerWeb.Services
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<LogoutButton> Logger
@inject ToastService ToastService

@if (CssClass == "nav-link")
{
    <a class="@CssClass" href="#" @onclick="HandleLogout" @onclick:preventDefault="true" disabled="@isLoggingOut">
        @if (isLoggingOut)
        {
            <span class="oi oi-reload" aria-hidden="true"></span> <text>Cerrando sesión...</text>
        }
        else
        {
            <span class="oi oi-account-logout" aria-hidden="true"></span> <text>@ButtonText</text>
        }
    </a>
}
else
{
    <button class="@CssClass" @onclick="HandleLogout" disabled="@isLoggingOut">
        @if (isLoggingOut)
        {
            <div class="spinner-border spinner-border-sm me-2" role="status">
                <span class="visually-hidden">Cerrando sesión...</span>
            </div>
            <text>Cerrando sesión...</text>
        }
        else
        {
            <i class="oi oi-account-logout me-2"></i>
            <text>@ButtonText</text>
        }
    </button>
}

<FootballerWeb.Shared.Components.ConfirmDialog @ref="confirmDialog" />

@code {
    [Parameter] public string ButtonText { get; set; } = "Cerrar Sesión";
    [Parameter] public string CssClass { get; set; } = "btn btn-outline-light";
    [Parameter] public bool ShowConfirmation { get; set; } = true;
    [Parameter] public string ConfirmationMessage { get; set; } = "¿Estás seguro de que deseas cerrar sesión?";
    [Parameter] public EventCallback OnLogoutCompleted { get; set; }
    
    private bool isLoggingOut = false;
    private FootballerWeb.Shared.Components.ConfirmDialog? confirmDialog;

    private async Task HandleLogout()
    {
        if (isLoggingOut) return;

        try
        {
            // Show confirmation if enabled
            if (ShowConfirmation && confirmDialog != null)
            {
                var confirmed = await confirmDialog.Show(
                    ConfirmationMessage, 
                    "Cerrar Sesión", 
                    FootballerWeb.Shared.Components.ConfirmDialog.ConfirmationType.Warning
                );
                if (!confirmed) return;
            }

            isLoggingOut = true;
            StateHasChanged();

            // Call AuthService logout
            var logoutSuccess = await AuthService.LogoutAsync();

            // Clear all tokens using the token service
            await JSRuntime.InvokeVoidAsync("eval", "window.tokenService?.clearTokens();");

            Logger.LogInformation("User logout completed. API Success: {Success}", logoutSuccess);

            // Fire completion event
            await OnLogoutCompleted.InvokeAsync();

            // Show appropriate message with modern toast
            if (logoutSuccess)
            {
                ToastService.ShowSuccess("Sesión cerrada exitosamente. ¡Hasta pronto!", "Sesión Cerrada");
            }
            else
            {
                ToastService.ShowWarning("Sesión cerrada localmente. Verificar conectividad con el servidor.", "Sesión Cerrada");
            }

            // Small delay to show the toast before redirect
            await Task.Delay(1500);

            // Redirect to home page
            Navigation.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during logout process");

            // Force cleanup
            try
            {
                await JSRuntime.InvokeVoidAsync("eval", "window.tokenService?.clearTokens();");
                AuthService.ClearUserToken();
            }
            catch (Exception cleanupEx)
            {
                Logger.LogError(cleanupEx, "Error during logout cleanup");
            }

            ToastService.ShowError("Error al cerrar sesión. Sesión limpiada localmente.", "Error de Logout");
            
            // Delay and redirect
            await Task.Delay(2000);
            Navigation.NavigateTo("/", true);
        }
        finally
        {
            isLoggingOut = false;
            StateHasChanged();
        }
    }
}