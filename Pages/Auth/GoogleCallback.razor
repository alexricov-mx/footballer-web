@page "/auth/google/callback"
@using FootballerWeb.Services
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@* @inject IAuthStateService AuthStateService *@
@inject IJwtClientService JwtClientService

<div class="callback-container">
    <div class="callback-card">
        @if (isProcessing)
        {
            <div class="text-center">
                <div class="spinner-border text-success" role="status">
                    <span class="visually-hidden">Procesando...</span>
                </div>
                <h4 class="mt-3">Procesando autenticación...</h4>
                <p>Un momento por favor...</p>
            </div>
        }
        else if (isSuccess)
        {
            <div class="text-center text-success">
                <i class="bi bi-check-circle-fill" style="font-size: 3rem;"></i>
                <h4 class="mt-3">¡Autenticación exitosa!</h4>
                <p>Bienvenido, @userName</p>
                <p>Redirigiendo a tu página de inicio...</p>
            </div>
        }
        else
        {
            <div class="text-center text-danger">
                <i class="bi bi-x-circle-fill" style="font-size: 3rem;"></i>
                <h4 class="mt-3">Error de autenticación</h4>
                <p>@errorMessage</p>
                <a href="/auth/simple-login" class="btn btn-primary">Intentar nuevamente</a>
            </div>
        }
    </div>
</div>

<style>
    .callback-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .callback-card {
        background: white;
        border-radius: 15px;
        padding: 3rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        max-width: 400px;
        width: 100%;
        text-align: center;
    }
</style>

@code {
    private bool isProcessing = true;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);

            // Check if we got a token (success case)
            if (query.TryGetValue("token", out var token) && !string.IsNullOrEmpty(token))
            {
                // Validate the token
                if (JwtClientService.IsTokenValid(token!))
                {
                    // Store the token in AuthService (for backward compatibility)
                    AuthService.SetUserToken(token!);
                    
                    // Store tokens in localStorage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                    
                    // Handle refresh token if present
                    if (query.TryGetValue("refresh_token", out var refreshTokenValue) && !string.IsNullOrEmpty(refreshTokenValue))
                    {
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", refreshTokenValue);
                        
                        // Initialize the auto-refresh service with both tokens
                        await JSRuntime.InvokeVoidAsync("eval", $"window.tokenService?.setTokens('{token}', '{refreshTokenValue}');");
                    }
                    
                    // Get user info from token
                    userName = JwtClientService.GetUserNameFromToken(token!) ?? "Usuario";
                    
                    isSuccess = true;
                    isProcessing = false;
                    StateHasChanged();
                    
                    // Redirect to home member after 2 seconds
                    await Task.Delay(2000);
                    Navigation.NavigateTo("/members/home");
                }
                else
                {
                    errorMessage = "Token inválido o expirado";
                    isProcessing = false;
                    StateHasChanged();
                }
            }
            // Check if we got an error
            else if (query.TryGetValue("error", out var error))
            {
                var errorString = error.ToString();
                if (errorString == "invalid_state")
                    errorMessage = "Error de validación de estado. Por favor, intenta de nuevo.";
                else if (errorString == "user_failed")
                    errorMessage = "Error obteniendo información del usuario de Google.";
                else if (errorString == "missing_code")
                    errorMessage = "Código de autorización faltante de Google.";
                else if (errorString == "internal")
                    errorMessage = "Error interno del servidor. Intenta más tarde.";
                else
                    errorMessage = $"Error de autenticación: {errorString}";
                
                isProcessing = false;
                StateHasChanged();
            }
            else
            {
                errorMessage = "No se recibieron parámetros de autenticación válidos";
                isProcessing = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error procesando autenticación: {ex.Message}";
            isProcessing = false;
            StateHasChanged();
        }
    }
}