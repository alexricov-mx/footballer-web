@page "/"
@using FootballerWeb.Services
@inject IContentService ContentService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Footballer Web App</PageTitle>

@if (isLoading)
{
    <div class="loading-container">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <h2>Cargando contenido...</h2>
    </div>
}
else if (content != null)
{
    <!-- 
    CAROUSEL DE IMÁGENES - CARACTERÍSTICAS TÉCNICAS:
    - Resolución recomendada: 2000x1200px mínimo
    - Formato: JPG optimizado para web
    - Tamaño máximo: 800KB por imagen
    - Aspect ratio: 16:9 o 5:3 para mejor visualización
    - Colores: Preferir imágenes con buena iluminación y contraste
    - Contenido: Estadios, jugadores en acción, celebraciones, campos de fútbol
    - URLs deben ser HTTPS para compatibilidad
    -->
    <section class="hero-carousel-section">
        <div class="carousel-container">
            @if (content.Carousel?.Images?.Any() == true)
            {
                @for (int i = 0; i < content.Carousel.Images.Count; i++)
                {
                    var image = content.Carousel.Images[i];
                    var isActive = i == currentSlideIndex;
                    
                    <div class="carousel-slide @(isActive ? "active" : "")" style="background-image: url('@image.Url');">
                        <div class="carousel-overlay">
                            <div class="hero-content">
                                <h1 class="hero-title">@content.Hero.Title</h1>
                                <p class="hero-subtitle">@content.Hero.Subtitle</p>
                                <p class="hero-description">@content.Hero.Description</p>
                                <div class="hero-actions">
                                    <a href="@content.Hero.CallToAction.Link" class="btn btn-primary btn-lg hero-cta">
                                        <i class="oi oi-account-login"></i> @content.Hero.CallToAction.Text
                                    </a>
                                    <button class="btn btn-outline-light btn-lg ms-3" @onclick="ScrollToFeatures">
                                        <i class="oi oi-chevron-bottom"></i> Explorar Características
                                    </button>
                                </div>
                            </div>
                            <div class="carousel-caption">
                                <p><i class="oi oi-camera-slr"></i> @image.Caption</p>
                            </div>
                        </div>
                    </div>
                }
                
                <!-- Indicadores del Carousel -->
                <div class="carousel-indicators">
                    @for (int i = 0; i < content.Carousel.Images.Count; i++)
                    {
                        var index = i;
                        <button class="indicator @(i == currentSlideIndex ? "active" : "")" 
                                @onclick="() => GoToSlide(index)"
                                title="Imagen @(i + 1)">
                        </button>
                    }
                </div>
                
                <!-- Controles de navegación -->
                <button class="carousel-nav prev" @onclick="PreviousSlide" title="Imagen anterior">
                    <i class="oi oi-chevron-left"></i>
                </button>
                <button class="carousel-nav next" @onclick="NextSlide" title="Siguiente imagen">
                    <i class="oi oi-chevron-right"></i>
                </button>
            }
        </div>
    </section>

    <!-- 
    SECCIÓN DE CARACTERÍSTICAS - EDITABLES DESDE API:
    Para editar estas características, modifica el archivo:
    api-footballer/Data/homepage-content.json en la sección "features"
    
    Cada característica debe tener:
    - icon: Clase CSS del ícono (ej: "oi-trophy", "oi-people", "oi-graph")
    - title: Título de la característica (máximo 50 caracteres)
    - description: Descripción detallada (máximo 200 caracteres)
    - highlight: true/false para destacar la característica
    -->
    <section class="features-section" id="features">
        <div class="container">
            <div class="row">
                <div class="col-12 text-center mb-5">
                    <h2 class="section-title">¿Por qué elegir Footballer Web App?</h2>
                    <p class="section-subtitle">Descubre las características que hacen única nuestra plataforma</p>
                    <div class="title-decoration">
                        <i class="oi oi-star"></i>
                    </div>
                </div>
            </div>
            <div class="row justify-content-center">
                @{
                    // Tomar solo las primeras 3 características como solicitado
                    var featuredItems = content.Features.Take(3).ToList();
                }
                @foreach (var feature in featuredItems)
                {
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="feature-card @(feature.Highlight ? "featured" : "")" data-aos="fade-up">
                            <div class="feature-icon">
                                <i class="@feature.Icon"></i>
                            </div>
                            <h4 class="feature-title">@feature.Title</h4>
                            <p class="feature-description">@feature.Description</p>
                            @if (feature.Highlight)
                            {
                                <div class="feature-badge">
                                    <i class="oi oi-badge"></i> Destacado
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            
            <!-- Call to Action en la sección de características -->
            <div class="row mt-5">
                <div class="col-12 text-center">
                    <a href="@content.Hero.CallToAction.Link" class="btn btn-primary btn-lg">
                        <i class="oi oi-rocket"></i> Comenzar Ahora
                    </a>
                    <p class="mt-3 text-muted">
                        <small><i class="oi oi-info"></i> Únete a más de 1,200 organizadores que confían en nosotros</small>
                    </p>
                </div>
            </div>
        </div>
    </section>
}
else
{
    <div class="error-container">
        <div class="error-content">
            <i class="oi oi-warning display-1 text-warning mb-3"></i>
            <h2>Error al cargar el contenido</h2>
            <p>No se pudo conectar con el servidor. Por favor, intenta nuevamente.</p>
            <button class="btn btn-primary" @onclick="LoadContent">
                <i class="oi oi-reload"></i> Reintentar
            </button>
        </div>
    </div>
}

@code {
    private HomepageContent? content;
    private bool isLoading = true;
    private int currentSlideIndex = 0;
    private Timer? slideTimer;
    private const int SLIDE_INTERVAL = 4000; // 4 segundos como solicitado

    protected override async Task OnInitializedAsync()
    {
        await LoadContent();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && content?.Carousel?.Images?.Any() == true)
        {
            StartCarouselTimer();
        }
        
        return Task.CompletedTask;
    }

    private async Task LoadContent()
    {
        try
        {
            isLoading = true;
            content = await ContentService.GetHomepageContentAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading content: {ex.Message}");
            // En producción, aquí podrías implementar logging más sofisticado
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StartCarouselTimer()
    {
        if (content?.Carousel?.Images?.Any() != true) return;

        slideTimer?.Dispose();
        slideTimer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                NextSlide();
            });
        }, null, SLIDE_INTERVAL, SLIDE_INTERVAL);
    }

    private void NextSlide()
    {
        if (content?.Carousel?.Images?.Any() != true) return;
        
        currentSlideIndex = (currentSlideIndex + 1) % content.Carousel.Images.Count;
        StateHasChanged();
    }

    private void PreviousSlide()
    {
        if (content?.Carousel?.Images?.Any() != true) return;
        
        currentSlideIndex = currentSlideIndex == 0 
            ? content.Carousel.Images.Count - 1 
            : currentSlideIndex - 1;
        StateHasChanged();
        
        // Reiniciar el timer cuando el usuario navega manualmente
        StartCarouselTimer();
    }

    private void GoToSlide(int index)
    {
        if (content?.Carousel?.Images?.Any() != true || index < 0 || index >= content.Carousel.Images.Count) return;
        
        currentSlideIndex = index;
        StateHasChanged();
        
        // Reiniciar el timer cuando el usuario navega manualmente
        StartCarouselTimer();
    }

    private async Task ScrollToFeatures()
    {
        await JSRuntime.InvokeVoidAsync("scrollToElement", "features");
    }

    public void Dispose()
    {
        slideTimer?.Dispose();
    }
}
